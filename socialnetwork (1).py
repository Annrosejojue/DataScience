# -*- coding: utf-8 -*-
"""socialnetwork.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AbiTxPJIbUriU5aUJ1W2lOU755UXdoOr
"""

from flask import Flask, render_template, request
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder

# Load data (replace 'Social_Network_Ads (1).csv' with the actual filename)
data = pd.read_csv('/content/Social_Network_Ads (1).csv')

# Separate features and target variable
X = data.drop('Purchased', axis=1)
y = data['Purchased']

# Feature encoding for 'Gender'
encoder = LabelEncoder()
X['Gender'] = encoder.fit_transform(X['Gender'])

# Train the Logistic Regression model
model = LogisticRegression()
model.fit(X, y)

data.shape

x = data.iloc[:,2:4].values
y = data.iloc[:,4:5].values

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, train_size = .75, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
x_train = sc_x.fit_transform(x_train)
x_test = sc_x.fit_transform(x_test)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

print("TRAIN-SET ACCURACY = ",classifier.score(x_train,y_train)*100,"%")
print("TEST-SET ACCURACY = ",classifier.score(x_test,y_test)*100,"%")

from sklearn.neighbors import KNeighborsClassifier
classifier1 = KNeighborsClassifier(n_neighbors = 4, metric = 'minkowski', p = 2)
classifier1.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

print("TRAIN-SET ACCURACY = ",classifier1.score(x_train,y_train)*100,"%")
print("TEST-SET ACCURACY = ",classifier1.score(x_test,y_test)*100,"%")



import pickle
with open('model.pkl', 'wb') as f:
  pickle.dump(model, f)

try:

  with open('model.pkl', 'rb') as f:
    model = pickle.load(f)
    print("Loaded model from pickle file.")
except FileNotFoundError:
  # If the model file is not found, train a new model
  print("Model pickle file not found. Training a new model.")